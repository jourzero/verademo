# This workflow will initiate a Veracode Static Analysis Pipeline scan, return a results.json and convert to SARIF for upload as a code scanning alert

name: Veracode Static Analysis Pipeline Scan

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
    push:
        branches: [master]
    pull_request:
        branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            # Use JDK 1.8
            - uses: actions/checkout@v2
            - name: Set up JDK 1.8
              uses: actions/setup-java@v1
              with:
                  java-version: 1.8

            # Build and package the code
            - name: Build with Maven
              run: mvn -B package --file pom.xml

            # Upload the war file to support security scans
            - name: Upload war file
              uses: actions/upload-artifact@v2
              with:
                  name: warfile
                  path: target/verademo.war

    # This workflow contains a job to build and submit pipeline scan, you will need to customize the build process accordingly and make sure the artifact you build is used as the file input to the pipeline scan file parameter
    pipeline-scan:
        # Wait on build
        needs: build

        # The type of runner that the job will run on
        runs-on: ubuntu-latest
        steps:
            ## Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it and copies all sources into ZIP file for submitting for analysis. Replace this section with your applications build steps
            #- uses: actions/checkout@v2
            #  with:
            #      repository: ""

            # Download war file to scan
            - name: Download war file to scan
              uses: actions/download-artifact@v2
              with:
                  name: warfile

            #- uses: papeloto/action-zip@v1
            #  with:
            #      files: /
            #      recursive: true
            #      dest: veracode-pipeline-scan-results-to-sarif.zip

            #- uses: actions/upload-artifact@v1
            #  with:
            #      name: my-artifact
            #      path: veracode-pipeline-scan-results-to-sarif.zip

            # download the Veracode Static Analysis Pipeline scan jar
            - uses: wei/curl@master
              with:
                  args: -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
            - run: unzip -o pipeline-scan-LATEST.zip

            # Setup java for the pipeline scan
            - uses: actions/setup-java@v1
              with:
                  java-version: 1.8

            # List fiels
            - run: ls -lR

            # Run the pipeline scan
            - run: java -jar pipeline-scan.jar --veracode_api_id "${{secrets.VERACODE_API_ID}}" --veracode_api_key "${{secrets.VERACODE_API_KEY}}" --fail_on_severity="Very High, High" --file target/verademo.war
              continue-on-error: true

            # Upload scan results
            - uses: actions/upload-artifact@v1
              with:
                  name: ScanResults
                  path: results.json

            # Convert scan data to SARIF
            - name: Convert pipeline scan output to SARIF format
              id: convert
              uses: veracode/veracode-pipeline-scan-results-to-sarif@master
              with:
                  pipeline-results-json: results.json

            # Upload SARIF file
            - uses: github/codeql-action/upload-sarif@v1
              with:
                  # Path to SARIF file relative to the root of the repository
                  sarif_file: veracode-results.sarif
